version: '3.8'

services:
  web:
    image: api-project
    env_file:
      - .env
    ports:
      - "8080:8080"
      - "8081:8081"
    restart: always
    volumes:
      - .:/usr/src/app
    networks:
      - api-network
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:alpine
    env_file:
      - .env
    ports:
      - "5438:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - api-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    networks:
      - api-network

  kafka-broker:
    image: confluentinc/cp-kafka
    hostname: kafka-command-broker
    depends_on:
      - kafka-zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181/kafka'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTO_COMMIT_ENABLE: 'false'
    restart: on-failure
    networks:
      - api-network

  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.102.0
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./vm_config.yml:/etc/prometheus/vm_config.yml
    command:
      - "--promscrape.config=/etc/prometheus/vm_config.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
      - "--enableTCP6"
    networks:
      - api-network
    restart: always

    # VictoriaMetrics instance, a single process responsible for
    # storing metrics and serve read requests.
  victoriametrics:
      container_name: victoriametrics
      image: victoriametrics/victoria-metrics:v1.102.0
      ports:
        - 8428:8428
        - 4242:4242
      volumes:
        - vmdata:/storage
      command:
        - "--storageDataPath=/storage"
        - "--httpListenAddr=:8428"
        - "--opentsdbListenAddr=:4242"

      networks:
        - api-network
      restart: always

    # Grafana instance configured with VictoriaMetrics as datasource
  grafana:
      container_name: grafana
      image: grafana/grafana:10.4.2
      depends_on:
        - "victoriametrics"
      ports:
        - 3000:3000
      volumes:
        - grafanadata:/var/lib/grafana
        - ./provisioning/datasources/prometheus-datasource:/etc/grafana/provisioning/datasources
        - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
        - ./../../dashboards/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
        - ./../../dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
      networks:
        - api-network
      restart: always


volumes:
  postgres_data:
  vmagentdata: { }
  vmdata: { }
  grafanadata: { }

networks:
  api-network:
    driver: bridge