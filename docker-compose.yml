version: '3.8'

services:
  web:
    image: api-project
    env_file:
      - .env
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - .:/usr/src/app
    networks:
      - api-network
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:alpine
    env_file:
      - .env
    ports:
      - "5438:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - api-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    networks:
      - api-network

  kafka-broker:
    image: confluentinc/cp-kafka
    hostname: kafka-command-broker
    depends_on:
      - kafka-zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181/kafka'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTO_COMMIT_ENABLE: 'false'
    restart: on-failure
    networks:
      - api-network


volumes:
  postgres_data:

networks:
  api-network:
    driver: bridge